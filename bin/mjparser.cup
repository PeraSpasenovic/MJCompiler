package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;

// import java.io.*;
import rs.ac.bg.etf.pp1.ast.*;


parser code {:
	
	boolean errorDetected = false;
	
	Logger log = Logger.getLogger(getClass());
   
   
    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
    	errorDetected = true;
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
    }
    
    public void report_info(String message, Object info) {
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.info(msg.toString());
    }
    
:}

scan with {:
	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		log.info(s.toString() + " " + s.value.toString());
	return s;
:}


terminal PROG, LBRACE, RBRACE, SEMI, LPAREN, RPAREN, COMMA, PRINT, RETURN, EQUAL, VOID;
terminal BREAK, CLASS, ABSTRACT, CONST, NEW, READ, FOR, EXTENDS, CONTINUE;
terminal PLUS, MINUS, MUL, DIV, MOD, ISEQ, ISNEQ, GRT, LESS, GREQ, LEQ, AND, OR;
terminal ADDAS, SUBAS, MULAS, DIVAS, MODAS, INC, DEC, LBRACK, RBRACK;
terminal Integer NUMBER ;
terminal String IDENT ;
terminal Boolean BOOL;
terminal Character CHAR;
terminal IF, ELSE;

nonterminal MethodDeclList, VarDecl;
nonterminal FormalParamList, FormalParamDecl, FormPars; 
nonterminal StatementList, Statement, Addop;

nonterminal rs.etf.pp1.symboltable.concepts.Obj Program, ProgName, Designator, MethodDecl, MethodTypeName; 
nonterminal rs.etf.pp1.symboltable.concepts.Struct Type, Term, Expr, Factor, VarDeclList; 

nonterminal DeclList, ConstDecl, ConstInitList, ConstInit, ClassDecl, ClassMethodList, Extends;
nonterminal AbstractClassDecl, AbstractClassMethodList, AnyMethodDeclList, AbstractMethodDecl, AbstractReturnType;
nonterminal DesignatorStatement, Assignop, Condition, CondTerm, CondFact, Relop, Mulop;
nonterminal Else, Return, InitialDesignator, ForCondition, AfterDesignator, PrintNum;

precedence left ELSE;

Program ::= (Program) PROG ProgName:p DeclList LBRACE MethodDeclList RBRACE 
;

ProgName ::= (ProgName) IDENT:pName 
;

DeclList ::= (DeclarationsVar) DeclList VarDecl  
			|
			(DeclarationsConst) DeclList ConstDecl
			|
			(DeclarationsClass) DeclList ClassDecl
			|
			(DeclListAbstract) DeclList AbstractClassDecl
			|
			(NoDecl)/* epsilon */ 
			;
			
ClassDecl ::= (ClassDecl) CLASS IDENT:className Extends LBRACE VarDeclList ClassMethodList RBRACE
;

ClassMethodList ::= (ClassMethods) LBRACE MethodDeclList RBRACE
				|
				(NoClassMethods) /* epsilon */
				;
			
AbstractClassDecl ::= (AbstractClassDecl) ABSTRACT CLASS IDENT:absClassName Extends LBRACE VarDeclList AbstractClassMethodList RBRACE
;

AbstractClassMethodList ::= (AbstractClassMethods) LBRACE AnyMethodDeclList RBRACE
						|
						(NoAbstractClassMethods) /* epsilon */
						;
						
AnyMethodDeclList ::= (AnyMethodReg) AnyMethodDeclList MethodDecl
						| (AnyMethodAbs) AnyMethodDeclList AbstractMethodDecl
						| (SingleAnyMethodReg) MethodDecl
						| (SingleAnyMethodAbs) AbstractMethodDecl
						;
						
AbstractMethodDecl ::= (AbstractMethodDecl) ABSTRACT AbstractReturnType:retType IDENT:methName LPAREN FormPars RPAREN SEMI
;

AbstractReturnType ::= (AbstractReturnName) IDENT:typeName
						|
						(AbstractReturnVoid) VOID:voidType
						;

Extends ::= (DoesExtend) EXTENDS Type
			|
			(NoExtends)/* epsilon */
			;
				
VarDeclList ::= (VarDeclarations) VarDeclList VarDecl
				|
				(NoVarDecl)/* epsilon */
				;
				
VarDecl ::= (VarDecl) Type:varType IDENT:varName SEMI 
;
					
ConstDecl ::= (ConstDecl) CONST Type ConstInitList SEMI
;

ConstInitList ::= (ConstInits) ConstInitList COMMA ConstInit
					|
					(ConstInitSingle) ConstInit
					;
					
ConstInit ::= (ConstNum) IDENT:constName EQUAL NUMBER:constVal
			|
			(ConstBool) IDENT:constName EQUAL BOOL:constVal
			|
			(ConstChar) IDENT:constName EQUAL CHAR:constVal
			;

Type ::= (Type) IDENT:typeName 
;

MethodDeclList ::= (MethodDeclarations) MethodDeclList MethodDecl
					|
					(NoMethodDecl)/* epsilon */
					;

MethodDecl ::= (MethodDecl) MethodTypeName
			   LPAREN FormPars RPAREN VarDeclList LBRACE StatementList RBRACE 
			   ;

MethodTypeName ::= (MethodTypeName) Type:retType IDENT:methName
;

FormPars ::= (FormParams) FormalParamList | (NoFormParam) /* epsilon */ ;

FormalParamList ::= (FormalParamDecls) FormalParamList COMMA FormalParamDecl
					|
					(SingleFormalParamDecl) FormalParamDecl
					;
					
FormalParamDecl ::= (FormalParamDecl) Type IDENT ;

StatementList ::= (Statements) StatementList Statement 
					|
				  (NoStmt) /* epsilon */
				  ;

Statement ::= (DesignatorStmt) DesignatorStatement SEMI
				|
				(IfStmt) IF LPAREN Condition RPAREN Statement Else
				|
				(ForStmt) FOR LPAREN InitialDesignator SEMI ForCondition SEMI AfterDesignator RPAREN Statement
				|
				(BreakStmt) BREAK SEMI
				|
				(ContinueStmt) CONTINUE SEMI
				|
				(ReturnStmt) Return SEMI
				|
				(ReadStmt) READ LPAREN Designator RPAREN SEMI
				|
				(PrintStmt) PRINT LPAREN Expr PrintNum RPAREN SEMI
				|
				(BlockStmt) LBRACE StatementList RBRACE
				;
				
Else ::= (ElseExists) ELSE Statement
		|
		(NoElse)/* epsilon */
		;
		
InitialDesignator ::= (InitialExists) DesignatorStatement
						|
						(NoInitial)/* epsilon */
						;
						
AfterDesignator ::= (AfterExists) DesignatorStatement
					|
					(NoAfter)/* epsilon */
					;
					
Return ::= (ReturnNoExpr) RETURN
			|
			(ReturnExpr) RETURN Expr
			;
			
PrintNum ::= (PrintNumExists) COMMA NUMBER:printNum
			|
			(NoPrintNum)/* epsilon */
			;
				
DesignatorStatement ::= (DesignatorAssign) Designator Assignop Expr
						|
						(DesignatorInc) Designator INC
						|
						(DesignatorDec) Designator DEC
						;
						
Condition ::= (Conditions) Condition OR CondTerm
				|
				(SingleCond) CondTerm
				;
				
CondTerm ::= (CondTerms) CondTerm AND CondFact
			|
			(SingleCondTerm) CondFact
			;
			
CondFact ::= (CondFactRel) Expr Relop Expr
			|
			(CondFactBool) Expr
			;
			  
Expr ::= (AddExpr) Expr:te Addop Term:t
		 |
		 (TermExpr) Term:t
		 ;

Term ::= (MulTerm) Term Mulop Factor
		|
		(FactorTerm) Factor:t 
		;

Factor ::= (NumFactor) NUMBER:constVal
			|
			(CharFactor) CHAR:constVal
			|
			(BoolFactor) BOOL:constVal
			|
		   	(VarFactor) Designator:d
		   	|
		   	(NewFactor) NEW Type
		   	|
		   	(ParenFactor) LPAREN Expr RPAREN
		   	;

Designator ::= (Designator) IDENT:name
;

Assignop ::= (Equals) EQUAL
;

Addop ::= (Add) PLUS
		|
		(Subtract) MINUS
		;

Mulop ::= (Multiply) MUL
		|
		(Divide) DIV
		|
		(Modulate) MOD
		;
		
Relop ::= (IsEqual) ISEQ
			|
			(IsNotEqual) ISNEQ
			|
			(Greater) GRT
			|
			(Lesser) LESS
			|
			(GrtEq) GREQ
			|
			(LesEq) LEQ
			;
