package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;

// import java.io.*;
import rs.ac.bg.etf.pp1.ast.*;


parser code {:
	
	boolean errorDetected = false;
	
	Logger log = Logger.getLogger(getClass());
   
   
    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
    	errorDetected = true;
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
    }
    
    public void report_info(String message, Object info) {
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.info(msg.toString());
    }
    
:}

scan with {:
	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		log.info(s.toString() + " " + s.value.toString());
	return s;
:}


terminal PROG, LBRACE, RBRACE, SEMI, LPAREN, RPAREN, COMMA, PRINT, RETURN, EQUAL, VOID;
terminal BREAK, CLASS, ABSTRACT, CONST, NEW, READ, FOR, EXTENDS, CONTINUE;
terminal PLUS, MINUS, MUL, DIV, MOD, ISEQ, ISNEQ, GRT, LESS, GREQ, LEQ, AND, OR;
terminal ADDAS, SUBAS, MULAS, DIVAS, MODAS, INC, DEC, LBRACK, RBRACK;
terminal Integer NUMBER ;
terminal String IDENT ;
terminal Boolean BOOL;
terminal Character CHAR;
terminal IF, ELSE;

nonterminal MethodDeclList MethodDeclList;
nonterminal VarDecl VarDecl;
nonterminal FormalParamList FormalParamList;
nonterminal FormalParamDecl FormalParamDecl;
nonterminal FormPars FormPars; 
nonterminal StatementList StatementList;
nonterminal Statement Statement;
nonterminal Addop Addop;

nonterminal rs.etf.pp1.symboltable.concepts.Obj Program, ProgName, Designator, MethodDecl, MethodTypeName; 
nonterminal rs.etf.pp1.symboltable.concepts.Struct Type, Term, Expr, Factor, VarDeclList; 

nonterminal DeclList DeclList;
nonterminal ConstDecl ConstDecl;
nonterminal ConstInitList ConstInitList;
nonterminal ConstInit ConstInit;
nonterminal ClassDecl ClassDecl;
nonterminal ClassMethodList ClassMethodList;
nonterminal Extends Extends;
nonterminal AbstractClassDecl AbstractClassDecl;
nonterminal AbstractClassMethodList AbstractClassMethodList;
nonterminal AnyMethodDeclList AnyMethodDeclList;
nonterminal AbstractMethodDecl AbstractMethodDecl;
nonterminal AbstractReturnType AbstractReturnType;
nonterminal DesignatorStatement DesignatorStatement;
nonterminal Assignop Assignop;
nonterminal Condition Condition;
nonterminal CondTerm CondTerm;
nonterminal CondFact CondFact;
nonterminal Relop Relop;
nonterminal Mulop Mulop;
nonterminal Else Else;
nonterminal Return Return;
nonterminal InitialDesignator InitialDesignator;
nonterminal ForCondition ForCondition;
nonterminal AfterDesignator AfterDesignator;
nonterminal PrintNum PrintNum;

precedence left ELSE;

Program ::= (Program) PROG ProgName:p DeclList:D1 LBRACE MethodDeclList:M2 RBRACE {: RESULT=new Program(p, D1, M2); RESULT.setLine(pleft); :} 
;

ProgName ::= (ProgName) IDENT:pName {: RESULT=new ProgName(pName); RESULT.setLine(pNameleft); :} 
;

DeclList ::= (DeclarationsVar) DeclList:D1 VarDecl:V2 {: RESULT=new DeclarationsVar(D1, V2); RESULT.setLine(D1left); :}  
			|
			(DeclarationsConst) DeclList:D1 ConstDecl:C2 {: RESULT=new DeclarationsConst(D1, C2); RESULT.setLine(D1left); :}
			|
			(DeclarationsClass) DeclList:D1 ClassDecl:C2 {: RESULT=new DeclarationsClass(D1, C2); RESULT.setLine(D1left); :}
			|
			(DeclListAbstract) DeclList:D1 AbstractClassDecl:A2 {: RESULT=new DeclListAbstract(D1, A2); RESULT.setLine(D1left); :}
			|
			(NoDecl) {: RESULT=new NoDecl(); :}/* epsilon */ 
			;
			
ClassDecl ::= (ClassDecl) CLASS IDENT:className Extends:E1 LBRACE VarDeclList:V2 ClassMethodList:C3 RBRACE {: RESULT=new ClassDecl(className, E1, V2, C3); RESULT.setLine(classNameleft); :}
;

ClassMethodList ::= (ClassMethods) LBRACE MethodDeclList:M1 RBRACE {: RESULT=new ClassMethods(M1); RESULT.setLine(M1left); :}
				|
				(NoClassMethods) {: RESULT=new NoClassMethods(); :} /* epsilon */
				;
			
AbstractClassDecl ::= (AbstractClassDecl) ABSTRACT CLASS IDENT:absClassName Extends:E1 LBRACE VarDeclList:V2 AbstractClassMethodList:A3 RBRACE {: RESULT=new AbstractClassDecl(absClassName, E1, V2, A3); RESULT.setLine(absClassNameleft); :}
;

AbstractClassMethodList ::= (AbstractClassMethods) LBRACE AnyMethodDeclList:A1 RBRACE {: RESULT=new AbstractClassMethods(A1); RESULT.setLine(A1left); :}
						|
						(NoAbstractClassMethods) {: RESULT=new NoAbstractClassMethods(); :} /* epsilon */
						;
						
AnyMethodDeclList ::= (AnyMethodReg) AnyMethodDeclList:A1 MethodDecl:M2 {: RESULT=new AnyMethodReg(A1, M2); RESULT.setLine(A1left); :}
						| (AnyMethodAbs) AnyMethodDeclList:A1 AbstractMethodDecl:A2 {: RESULT=new AnyMethodAbs(A1, A2); RESULT.setLine(A1left); :}
						| (SingleAnyMethodReg) MethodDecl:M1 {: RESULT=new SingleAnyMethodReg(M1); RESULT.setLine(M1left); :}
						| (SingleAnyMethodAbs) AbstractMethodDecl:A1 {: RESULT=new SingleAnyMethodAbs(A1); RESULT.setLine(A1left); :}
						;
						
AbstractMethodDecl ::= (AbstractMethodDecl) ABSTRACT AbstractReturnType:retType IDENT:methName LPAREN FormPars:F1 RPAREN SEMI {: RESULT=new AbstractMethodDecl(retType, methName, F1); RESULT.setLine(retTypeleft); :}
;

AbstractReturnType ::= (AbstractReturnName) IDENT:typeName {: RESULT=new AbstractReturnName(typeName); RESULT.setLine(typeNameleft); :}
						|
						(AbstractReturnVoid) VOID:voidType {: RESULT=new AbstractReturnVoid(); :}
						;

Extends ::= (DoesExtend) EXTENDS Type:T1 {: RESULT=new DoesExtend(T1); RESULT.setLine(T1left); :}
			|
			(NoExtends) {: RESULT=new NoExtends(); :}/* epsilon */
			;
				
VarDeclList ::= (VarDeclarations) VarDeclList:V1 VarDecl:V2 {: RESULT=new VarDeclarations(V1, V2); RESULT.setLine(V1left); :}
				|
				(NoVarDecl) {: RESULT=new NoVarDecl(); :}/* epsilon */
				;
				
VarDecl ::= (VarDecl) Type:varType IDENT:varName SEMI {: RESULT=new VarDecl(varType, varName); RESULT.setLine(varTypeleft); :} 
;
					
ConstDecl ::= (ConstDecl) CONST Type:T1 ConstInitList:C2 SEMI {: RESULT=new ConstDecl(T1, C2); RESULT.setLine(T1left); :}
;

ConstInitList ::= (ConstInits) ConstInitList:C1 COMMA ConstInit:C2 {: RESULT=new ConstInits(C1, C2); RESULT.setLine(C1left); :}
					|
					(ConstInitSingle) ConstInit:C1 {: RESULT=new ConstInitSingle(C1); RESULT.setLine(C1left); :}
					;
					
ConstInit ::= (ConstNum) IDENT:constName EQUAL NUMBER:constVal {: RESULT=new ConstNum(constName, constVal); RESULT.setLine(constNameleft); :}
			|
			(ConstBool) IDENT:constName EQUAL BOOL:constVal {: RESULT=new ConstBool(constName, constVal); RESULT.setLine(constNameleft); :}
			|
			(ConstChar) IDENT:constName EQUAL CHAR:constVal {: RESULT=new ConstChar(constName, constVal); RESULT.setLine(constNameleft); :}
			;

Type ::= (Type) IDENT:typeName {: RESULT=new Type(typeName); RESULT.setLine(typeNameleft); :} 
;

MethodDeclList ::= (MethodDeclarations) MethodDeclList:M1 MethodDecl:M2 {: RESULT=new MethodDeclarations(M1, M2); RESULT.setLine(M1left); :}
					|
					(NoMethodDecl) {: RESULT=new NoMethodDecl(); :}/* epsilon */
					;

MethodDecl ::= (MethodDecl) MethodTypeName:M1
			   LPAREN FormPars:F2 RPAREN VarDeclList:V3 LBRACE StatementList:S4 RBRACE {: RESULT=new MethodDecl(M1, F2, V3, S4); RESULT.setLine(M1left); :} 
			   ;

MethodTypeName ::= (MethodTypeName) Type:retType IDENT:methName {: RESULT=new MethodTypeName(retType, methName); RESULT.setLine(retTypeleft); :}
;

FormPars ::= (FormParams) FormalParamList:F1 {: RESULT=new FormParams(F1); RESULT.setLine(F1left); :} | (NoFormParam) {: RESULT=new NoFormParam(); :} /* epsilon */ ;

FormalParamList ::= (FormalParamDecls) FormalParamList:F1 COMMA FormalParamDecl:F2 {: RESULT=new FormalParamDecls(F1, F2); RESULT.setLine(F1left); :}
					|
					(SingleFormalParamDecl) FormalParamDecl:F1 {: RESULT=new SingleFormalParamDecl(F1); RESULT.setLine(F1left); :}
					;
					
FormalParamDecl ::= (FormalParamDecl) Type:T1 IDENT:I2 {: RESULT=new FormalParamDecl(T1, I2); RESULT.setLine(T1left); :} ;

StatementList ::= (Statements) StatementList:S1 Statement:S2 {: RESULT=new Statements(S1, S2); RESULT.setLine(S1left); :} 
					|
				  (NoStmt) {: RESULT=new NoStmt(); :} /* epsilon */
				  ;

Statement ::= (DesignatorStmt) DesignatorStatement:D1 SEMI {: RESULT=new DesignatorStmt(D1); RESULT.setLine(D1left); :}
				|
				(IfStmt) IF LPAREN Condition:C1 RPAREN Statement:S2 Else:E3 {: RESULT=new IfStmt(C1, S2, E3); RESULT.setLine(C1left); :}
				|
				(ForStmt) FOR LPAREN InitialDesignator:I1 SEMI ForCondition:F2 SEMI AfterDesignator:A3 RPAREN Statement:S4 {: RESULT=new ForStmt(I1, F2, A3, S4); RESULT.setLine(I1left); :}
				|
				(BreakStmt) BREAK SEMI {: RESULT=new BreakStmt(); :}
				|
				(ContinueStmt) CONTINUE SEMI {: RESULT=new ContinueStmt(); :}
				|
				(ReturnStmt) Return:R1 SEMI {: RESULT=new ReturnStmt(R1); RESULT.setLine(R1left); :}
				|
				(ReadStmt) READ LPAREN Designator:D1 RPAREN SEMI {: RESULT=new ReadStmt(D1); RESULT.setLine(D1left); :}
				|
				(PrintStmt) PRINT LPAREN Expr:E1 PrintNum:P2 RPAREN SEMI {: RESULT=new PrintStmt(E1, P2); RESULT.setLine(E1left); :}
				|
				(BlockStmt) LBRACE StatementList:S1 RBRACE {: RESULT=new BlockStmt(S1); RESULT.setLine(S1left); :}
				;
				
Else ::= (ElseExists) ELSE Statement:S1 {: RESULT=new ElseExists(S1); RESULT.setLine(S1left); :}
		|
		(NoElse) {: RESULT=new NoElse(); :}/* epsilon */
		;
		
InitialDesignator ::= (InitialExists) DesignatorStatement:D1 {: RESULT=new InitialExists(D1); RESULT.setLine(D1left); :}
						|
						(NoInitial) {: RESULT=new NoInitial(); :}/* epsilon */
						;
						
AfterDesignator ::= (AfterExists) DesignatorStatement:D1 {: RESULT=new AfterExists(D1); RESULT.setLine(D1left); :}
					|
					(NoAfter) {: RESULT=new NoAfter(); :}/* epsilon */
					;
					
Return ::= (ReturnNoExpr) RETURN {: RESULT=new ReturnNoExpr(); :}
			|
			(ReturnExpr) RETURN Expr:E1 {: RESULT=new ReturnExpr(E1); RESULT.setLine(E1left); :}
			;
			
PrintNum ::= (PrintNumExists) COMMA NUMBER:printNum {: RESULT=new PrintNumExists(printNum); RESULT.setLine(printNumleft); :}
			|
			(NoPrintNum) {: RESULT=new NoPrintNum(); :}/* epsilon */
			;
				
DesignatorStatement ::= (DesignatorAssign) Designator:D1 Assignop:A2 Expr:E3 {: RESULT=new DesignatorAssign(D1, A2, E3); RESULT.setLine(D1left); :}
						|
						(DesignatorInc) Designator:D1 INC {: RESULT=new DesignatorInc(D1); RESULT.setLine(D1left); :}
						|
						(DesignatorDec) Designator:D1 DEC {: RESULT=new DesignatorDec(D1); RESULT.setLine(D1left); :}
						;
						
Condition ::= (Conditions) Condition:C1 OR CondTerm:C2 {: RESULT=new Conditions(C1, C2); RESULT.setLine(C1left); :}
				|
				(SingleCond) CondTerm:C1 {: RESULT=new SingleCond(C1); RESULT.setLine(C1left); :}
				;
				
CondTerm ::= (CondTerms) CondTerm:C1 AND CondFact:C2 {: RESULT=new CondTerms(C1, C2); RESULT.setLine(C1left); :}
			|
			(SingleCondTerm) CondFact:C1 {: RESULT=new SingleCondTerm(C1); RESULT.setLine(C1left); :}
			;
			
CondFact ::= (CondFactRel) Expr:E1 Relop:R2 Expr:E3 {: RESULT=new CondFactRel(E1, R2, E3); RESULT.setLine(E1left); :}
			|
			(CondFactBool) Expr:E1 {: RESULT=new CondFactBool(E1); RESULT.setLine(E1left); :}
			;
			  
Expr ::= (AddExpr) Expr:te Addop:A1 Term:t {: RESULT=new AddExpr(te, A1, t); RESULT.setLine(teleft); :}
		 |
		 (TermExpr) Term:t {: RESULT=new TermExpr(t); RESULT.setLine(tleft); :}
		 ;

Term ::= (MulTerm) Term:T1 Mulop:M2 Factor:F3 {: RESULT=new MulTerm(T1, M2, F3); RESULT.setLine(T1left); :}
		|
		(FactorTerm) Factor:t {: RESULT=new FactorTerm(t); RESULT.setLine(tleft); :} 
		;

Factor ::= (NumFactor) NUMBER:constVal {: RESULT=new NumFactor(constVal); RESULT.setLine(constValleft); :}
			|
			(CharFactor) CHAR:constVal {: RESULT=new CharFactor(constVal); RESULT.setLine(constValleft); :}
			|
			(BoolFactor) BOOL:constVal {: RESULT=new BoolFactor(constVal); RESULT.setLine(constValleft); :}
			|
		   	(VarFactor) Designator:d {: RESULT=new VarFactor(d); RESULT.setLine(dleft); :}
		   	|
		   	(NewFactor) NEW Type:T1 {: RESULT=new NewFactor(T1); RESULT.setLine(T1left); :}
		   	|
		   	(ParenFactor) LPAREN Expr:E1 RPAREN {: RESULT=new ParenFactor(E1); RESULT.setLine(E1left); :}
		   	;

Designator ::= (Designator) IDENT:name {: RESULT=new Designator(name); RESULT.setLine(nameleft); :}
;

Assignop ::= (Equals) EQUAL {: RESULT=new Equals(); :}
;

Addop ::= (Add) PLUS {: RESULT=new Add(); :}
		|
		(Subtract) MINUS {: RESULT=new Subtract(); :}
		;

Mulop ::= (Multiply) MUL {: RESULT=new Multiply(); :}
		|
		(Divide) DIV {: RESULT=new Divide(); :}
		|
		(Modulate) MOD {: RESULT=new Modulate(); :}
		;
		
Relop ::= (IsEqual) ISEQ {: RESULT=new IsEqual(); :}
			|
			(IsNotEqual) ISNEQ {: RESULT=new IsNotEqual(); :}
			|
			(Greater) GRT {: RESULT=new Greater(); :}
			|
			(Lesser) LESS {: RESULT=new Lesser(); :}
			|
			(GrtEq) GREQ {: RESULT=new GrtEq(); :}
			|
			(LesEq) LEQ {: RESULT=new LesEq(); :}
			;
